File = _{ SOI ~ NEWLINE* ~ (Statement ~ NEWLINE+)* ~ Statement? ~ EOI }
Statement = {
	AssignStatement
    | SuperExpression
}
AssignStatement = { PatternAssignment | VariableAssignment | PropertiesAssignment }

VariableAssignment = { Variable ~ "=" ~ SuperExpression }
PropertiesAssignment = { SuperExpression ~ Properties }
SuperExpression = { MethodCall | Expression }
MethodCall = { Expression ~ FunctionCall+ }
Expression = { 
    PropertyGetter
    | Boolean
    | FunctionCall
    | Variable 
    | PatternSuperExpression
    | Number 
    | String 
    | PatternSlot 
    | Track 
    | Mixer
    | Properties
    | Array }
FunctionCall = { Identifier | "(" ~ NEWLINE* ~ Identifier ~ NEWLINE* ~ (Expression ~ NEWLINE*)+ ~ ")" }
Boolean = { "true" | "false" }
PatternSlot = ${ Track ~ "@" ~ UnsignedInt }
Track = ${ Mixer ~ UnsignedInt }
Mixer = { "$" }
Array = { "[" ~ NEWLINE* ~ SuperExpression ~ NEWLINE* ~ ("," ~ NEWLINE* ~ SuperExpression ~ NEWLINE*)* ~ "]" }
PropertyGetter = { (Variable 
    | Pattern 
    | PatternSlot 
    | Track 
    | Mixer
    | Properties) ~ NEWLINE? ~ ("." ~ NEWLINE? ~ Identifier ~ NEWLINE?)+ }
Properties = { "{" ~ NEWLINE* ~ KvPair ~ NEWLINE* ~ ("," ~ NEWLINE* ~ KvPair)* ~ NEWLINE* ~ "}" }
KvPair = { NEWLINE* ~ Identifier ~ NEWLINE* ~ ":" ~ NEWLINE* ~ PropertyValue ~ NEWLINE* }
PropertyValue = { PatternExpression | SuperExpression }
Variable = ${ ":" ~ Identifier }
String = ${ "\"" ~ StringInner ~ "\"" }
StringInner = @{ Char* }
Char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
Number = @{ "-"? ~ UnsignedFloat }
UnsignedFloat = @{ UnsignedInt
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
UnsignedInt = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }

// Patterns language

PatternAssignment = { PatternSlot ~ PatternSuperExpression }
PatternSuperExpression = { PatternExpressionList | PatternExpression }
PatternExpressionList = { PatternExpression ~ NEWLINE* ~ ("," ~ NEWLINE* ~ PatternExpression)+ }
PatternExpression = { Pattern ~ PatternInput? ~ ("&" ~ PatternMethod? ~ Properties?)? }
PatternMethod = { FunctionCall+ }
PatternInput = { Expression }
Pattern = { "|" ~ !Tie ~ BeatEvent* ~  "|" }
BeatEvent = ${ Event+ }
Event = { Group | Chord | ParenthesisedEventGroup }
ParenthesisedEventGroup = ${ "(" ~ WHITESPACE* ~ (BeatEvent ~ WHITESPACE*)+ ~ ")" ~ EventMethod* }
Chord = ${ "[" ~ WHITESPACE* ~ (BeatEvent ~ WHITESPACE*)+ ~ "]" ~ EventMethod* }
Group = ${ PatternAtom+ }
PatternAtom = { 
    Octave 
    | (( Note | Tie | Pause | Modulation | PatternInlet ) ~ EventMethod*) }
Note = ${ Alteration* ~ Pitch }
Pitch = { ASCII_DIGIT | 'a'..'f' }
Pause = { "r" }
PatternInlet = { "%" }
Tie = { "_" }
Octave = { "o" | "O" }
Alteration = { "+" | "-" }
EventMethod = { "." | "*" | ":" }
Modulation = { ModulationSymbol | LiteralModulation }
ModulationSymbol = { "p" | "F" | "<" | ">" }
LiteralModulation = { ("{" ~ WHITESPACE* ~ Number ~ WHITESPACE* ~ "}") }
